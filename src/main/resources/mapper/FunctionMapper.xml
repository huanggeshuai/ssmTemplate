<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huang.mapper.FunctionMapper">
  <resultMap id="BaseResultMap" type="com.huang.entity.Function">
    <id column="function_id" jdbcType="INTEGER" property="functionId" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="function_name" jdbcType="VARCHAR" property="functionName" />
    <result column="function_des" jdbcType="VARCHAR" property="functionDes" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="text" jdbcType="VARCHAR" property="text" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="icon" jdbcType="VARCHAR" property="icon" />
    <result column="type" jdbcType="INTEGER" property="type" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    function_id, parent_id, function_name, function_des, url, text, state, code, icon,
    type
  </sql>
  <select id="selectByExample" parameterType="com.huang.entity.FunctionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from function
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from function
    where function_id = #{functionId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from function
    where function_id = #{functionId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.huang.entity.FunctionExample">
    delete from function
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.huang.entity.Function">
    insert into function (function_id, parent_id, function_name,
      function_des, url, text,
      state, code, icon,
      type)
    values (#{functionId,jdbcType=INTEGER}, #{parentId,jdbcType=INTEGER}, #{functionName,jdbcType=VARCHAR},
      #{functionDes,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR}, #{text,jdbcType=VARCHAR},
      #{state,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, #{icon,jdbcType=VARCHAR},
      #{type,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.huang.entity.Function">
    insert into function
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="functionId != null">
        function_id,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="functionName != null">
        function_name,
      </if>
      <if test="functionDes != null">
        function_des,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="text != null">
        text,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="icon != null">
        icon,
      </if>
      <if test="type != null">
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="functionId != null">
        #{functionId,jdbcType=INTEGER},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="functionName != null">
        #{functionName,jdbcType=VARCHAR},
      </if>
      <if test="functionDes != null">
        #{functionDes,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="text != null">
        #{text,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="icon != null">
        #{icon,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.huang.entity.FunctionExample" resultType="java.lang.Long">
    select count(*) from function
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update function
    <set>
      <if test="record.functionId != null">
        function_id = #{record.functionId,jdbcType=INTEGER},
      </if>
      <if test="record.parentId != null">
        parent_id = #{record.parentId,jdbcType=INTEGER},
      </if>
      <if test="record.functionName != null">
        function_name = #{record.functionName,jdbcType=VARCHAR},
      </if>
      <if test="record.functionDes != null">
        function_des = #{record.functionDes,jdbcType=VARCHAR},
      </if>
      <if test="record.url != null">
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.text != null">
        text = #{record.text,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.code != null">
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.icon != null">
        icon = #{record.icon,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update function
    set function_id = #{record.functionId,jdbcType=INTEGER},
      parent_id = #{record.parentId,jdbcType=INTEGER},
      function_name = #{record.functionName,jdbcType=VARCHAR},
      function_des = #{record.functionDes,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      text = #{record.text,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=VARCHAR},
      code = #{record.code,jdbcType=VARCHAR},
      icon = #{record.icon,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.huang.entity.Function">
    update function
    <set>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="functionName != null">
        function_name = #{functionName,jdbcType=VARCHAR},
      </if>
      <if test="functionDes != null">
        function_des = #{functionDes,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="text != null">
        text = #{text,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="icon != null">
        icon = #{icon,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
    </set>
    where function_id = #{functionId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.huang.entity.Function">
    update function
    set parent_id = #{parentId,jdbcType=INTEGER},
      function_name = #{functionName,jdbcType=VARCHAR},
      function_des = #{functionDes,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      text = #{text,jdbcType=VARCHAR},
      state = #{state,jdbcType=VARCHAR},
      code = #{code,jdbcType=VARCHAR},
      icon = #{icon,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER}
    where function_id = #{functionId,jdbcType=INTEGER}
  </update>

  <!--mybatis 自查询 查询父亲结点的下的孩子结点，再将查询出来的孩子结点作为父节在查询 形成tree-->
  <!--一定要关闭lazy加载 json序列化会出现异常-->
  <select id="selectchildbypartent" parameterType="integer" resultMap="TreeMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM  function
    where parent_id=#{parent_id,jdbcType=INTEGER}
  </select>
  <resultMap id="TreeMap" type="com.huang.entity.Function" extends="BaseResultMap">
    <collection property="children"
                ofType="com.huang.entity.Function"
                select="com.huang.mapper.FunctionMapper.selectchildbypartent"
                column="function_id"
                fetchType="eager">

    </collection>
  </resultMap>


  <!--查询某一结点下的有多少孩子结点-->

  <select id="selectchildrenByid" parameterType="integer" resultMap="functionchild">
    SELECT
    <include refid="Base_Column_List" />
    FROM  function
    where function_id=#{functionId,jdbcType=INTEGER}
  </select>
  <resultMap id="functionchild" type="com.huang.entity.Function" extends="BaseResultMap">
    <collection property="children"
                ofType="com.huang.entity.Function"
                select="com.huang.mapper.FunctionMapper.selectchildbypartent"
                column="function_id"
                fetchType="lazy">
    </collection>
  </resultMap>
  <!--根据用户的权限查询menu-->
  <select id="functionMenu" resultMap="BaseResultMap">

    SELECT function.*
    from user left JOIN role
    on user.role_id=role.role_id
    right join role_function
    on role.role_id = role_function.role_id
    join function
    on role_function.function_id = function.function_id
    where user.userid=#{userid,jdbcType=INTEGER}
    and type = 1
  </select>

</mapper>
